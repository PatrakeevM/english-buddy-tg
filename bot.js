import { Bot, GrammyError, HttpError, InlineKeyboard } from "grammy";
import { hydrate } from "@grammyjs/hydrate";
import dotenv from "dotenv";

import { loadUsers, saveUsers } from "./utils/userStorage.js";
import { translateText } from "./utils/translate.js";

dotenv.config();

// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY);

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤
bot.use(hydrate());

let users = loadUsers();

// –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
bot.api.setMyCommands([
  {
    command: "start",
    description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
  },
  {
    command: "registr",
    description: "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è",
  },
  {
    command: "choose",
    description: "–í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è",
  },
  // {
  //   command: "translator",
  //   description: "–û—Ç–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫",
  // },
  // {
  //   command: "dictionary",
  //   description: "–û—Ç–∫—Ä—ã—Ç—å —Å–ª–æ–≤–∞—Ä—å",
  // },
]);

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
const level = new InlineKeyboard()
  .text("–ù–∞—á–∞–ª—å–Ω—ã–π üå±", "level_start")
  .text("–°—Ä–µ–¥–Ω–∏–π üìè", "level_intermidiate");

const lesson = new InlineKeyboard()
  .text("–£—Ä–æ–∫–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è üìö‚úèÔ∏è", "lessons")
  .row()
  .text("–ò–≥—Ä—ã –∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã üé≤üß©", "quiz")
  .row()
  .text("–†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ üó£Ô∏èüí¨", "practice")
  .row()
  .text("–¢–µ–º—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è üó®Ô∏èü§î", "topics");

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
bot.command("start", async (ctx) => {
  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç –Ø - English Buddy! üëã
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /registr
–ï—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /choose`
  );
});

bot.command("registr", async (ctx) => {
  const userId = ctx.from.id;
  if (users[userId]) {
    await ctx.reply(`–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫: ${users[userId].name}`);
  } else {
    await ctx.reply(`–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å!
–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:`);
  }
});

bot.command("choose", async (ctx) => {
  await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏—è:`, {
    reply_markup: lesson,
  });
});

// bot.command("translator", async (ctx) => {
//   await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (—Ç–µ–∫—Å—Ç; —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞)
// –ù–∞–ø—Ä–∏–º–µ—Ä: ("–ø—Ä–∏–≤–µ—Ç; ru" –∏–ª–∏ "hello; en")`);
// });

// bot.command("dictionary", async (ctx) => {
//   await ctx.reply(`–í–∞—à —Å–ª–æ–≤–∞—Ä—å:`);
// });

bot.on(":text", async (ctx) => {
  const userId = ctx.from.id;

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
  if (!users[userId]) {
    const name = ctx.message.text;

    if (name.length < 2) {
      await ctx.reply("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª—å—à–µ –¥–≤—É—Ö –±—É–∫–≤!");
      return;
    }

    users[userId] = { name: ctx.message.text, level: null };
    saveUsers(users);
    await ctx.reply(
      `–û—Ç–ª–∏—á–Ω–æ, ${ctx.message.text}! 
–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏—è —è–∑—ã–∫–∞:`,
      {
        reply_markup: level,
      }
    );
  } else {
    const messageText = ctx.message.text;

    if (messageText.includes(";")) {
      const [textToTranslate, lang] = messageText.split(";");
      const toRussian = lang.trim().toLowerCase() === "ru";

      const translatedText = translateText(textToTranslate.trim(), toRussian);

      if (translatedText) {
        await ctx.reply(`–ü–µ—Ä–µ–≤–æ–¥: ${translatedText}`);
      } else {
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ");
      }
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
bot.callbackQuery("level_start", async (ctx) => {
  const userId = ctx.from.id;
  if (!users[userId].level) {
    users[userId].level = "–ù–∞—á–∞–ª—å–Ω—ã–π";
    saveUsers(users);
    await ctx.reply(
      `–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω! 
–ò–º—è: <b>${users[userId].name}</b>
–£—Ä–æ–≤–µ–Ω—å: <b>${users[userId].level}</b>
–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏—è:`,
      {
        reply_markup: lesson,
        parse_mode: "HTML",
      }
    );
  }
  await ctx.answerCallbackQuery();
});

bot.callbackQuery("level_intermidiate", async (ctx) => {
  const userId = ctx.from.id;
  if (!users[userId].level) {
    users[userId].level = "–°—Ä–µ–¥–Ω–∏–π";
    saveUsers(users);
    await ctx.reply(
      `–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω! 
–ò–º—è: <b>${users[userId].name}</b> 
–£—Ä–æ–≤–µ–Ω—å: <b>${users[userId].level}</b>
–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏—è:`,
      {
        reply_markup: lesson,
        parse_mode: "HTML",
      }
    );
  }
  await ctx.answerCallbackQuery();
});

// –û—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${ctx.update.update_id}:`);
  const e = err.error;

  if (e instanceof GrammyError) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", e.description);
  } else if (e instanceof HttpError) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º Telegram:", e);
  } else {
    console.error("–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
